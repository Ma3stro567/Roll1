import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token='7927818935:AAEfG0GnN3dhGqG4ql3DTPj5vR29JvDVTe0')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users_data = {}
withdraw_requests = []
stats = {'total_users': 0, 'messages_today': 0}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    admin_password = State()
    broadcast_message = State()
    add_stars = State()

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def web_server():
    app = web.Application()
    app.router.add_get('/', lambda request: web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"))
    return app

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {
            'stars': 0.0,
            'referrals': 0,
            'username': message.from_user.username
        }
        stats['total_users'] += 1
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    keyboard.add(types.InlineKeyboardButton("üí´ –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral"))
    if user_id == 5083696616:  # –ó–∞–º–µ–Ω–∏—Ç–µ ADMIN_ID –Ω–∞ –≤–∞—à ID
        keyboard.add(types.InlineKeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üöÄ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'profile')
async def show_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = users_data[user_id]
    
    text = f"üåü –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚≠ê –ó–≤–µ–∑–¥: {user['stars']}\nüë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ (–æ—Ç 25‚≠ê)", callback_data="withdraw"))
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    
    await bot.edit_message_text(text, callback_query.message.chat.id, 
                              callback_query.message.message_id, 
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'referral')
async def show_referral(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    ref_link = f"https://t.me/Ma3stroStarsbot?start={user_id}"
    
    text = f"üéØ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{ref_link}\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 0.25‚≠ê"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    
    await bot.edit_message_text(text, callback_query.message.chat.id, 
                              callback_query.message.message_id, 
                              reply_markup=keyboard)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.callback_query_handler(lambda c: c.data == 'admin_panel')
async def admin_panel(callback_query: types.CallbackQuery):
    await AdminStates.admin_password.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@dp.message_handler(state=AdminStates.admin_password)
async def check_admin_password(message: types.Message, state: FSMContext):
    if message.text == "popopo12":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        keyboard.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
        keyboard.add(types.InlineKeyboardButton("üì® –ó–∞—è–≤–∫–∏", callback_data="withdraw_requests"))
        keyboard.add(types.InlineKeyboardButton("üéÅ –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="add_stars"))
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)
        await state.finish()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.finish()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data == 'broadcast')
async def broadcast(callback_query: types.CallbackQuery):
    await AdminStates.broadcast_message.set()
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message_handler(state=AdminStates.broadcast_message)
async def send_broadcast(message: types.Message, state: FSMContext):
    for user_id in users_data:
        try:
            await bot.send_message(user_id, message.text)
        except:
            pass
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'stats')
async def show_stats(callback_query: types.CallbackQuery):
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']}"
    await bot.send_message(callback_query.from_user.id, text)

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
async def on_startup(dp):
    app = await web_server()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
