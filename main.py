from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8152843550:AAH2ty2PVrJ3_gDllmE9sNn9r4XkveDTK_k"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
MIN_BET = 0.05
MIN_TOP_UP = 0.05
MIN_WITHDRAW = 0.05

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu_kb = InlineKeyboardMarkup(row_width=1)
main_menu_kb.add(
    InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="play"),
    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
profile_kb = InlineKeyboardMarkup(row_width=2)
profile_kb.add(
    InlineKeyboardButton("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up"),
    InlineKeyboardButton("‚ûñ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users_data:
        users_data[user_id] = {"balance": 0.0}

    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! üéâ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å"
@dp.callback_query_handler(Text(equals="play"))
async def play_game(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if users_data[user_id]["balance"] < MIN_BET:
        await callback_query.message.edit_text(
            f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} USDT.",
            reply_markup=main_menu_kb
        )
        return

    # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    users_data[user_id]["balance"] -= MIN_BET
    if True:  # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É –≤—ã–∏–≥—Ä—ã—à–∞
        win_amount = MIN_BET * 1.80
        users_data[user_id]["balance"] += win_amount
        await callback_query.message.edit_text(
            f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount:.2f} USDT! –í–∞—à –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']:.2f} USDT.",
            reply_markup=main_menu_kb
        )
    else:
        await callback_query.message.edit_text(
            f"üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']:.2f} USDT.",
            reply_markup=main_menu_kb
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.callback_query_handler(Text(equals="profile"))
async def profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    balance = users_data[user_id]["balance"]

    await callback_query.message.edit_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT",
        reply_markup=profile_kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
@dp.callback_query_handler(Text(equals="top_up"))
async def top_up(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        f"‚ûï –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {MIN_TOP_UP} USDT. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )

@dp.message_handler(lambda message: message.text.isdigit())
async def handle_top_up(message: types.Message):
    user_id = message.from_user.id
    amount = float(message.text)

    if amount < MIN_TOP_UP:
        await message.answer(f"‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_TOP_UP} USDT.")
        return

    users_data[user_id]["balance"] += amount
    await message.answer(f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} USDT. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']:.2f} USDT.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏"
@dp.callback_query_handler(Text(equals="withdraw"))
async def withdraw(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        f"‚ûñ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {MIN_WITHDRAW} USDT. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:"
    )

@dp.message_handler(lambda message: message.text.isdigit())
async def handle_withdraw(message: types.Message):
    user_id = message.from_user.id
    amount = float(message.text)

    if amount < MIN_WITHDRAW:
        await message.answer(f"‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {MIN_WITHDRAW} USDT.")
        return

    if amount > users_data[user_id]["balance"]:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        return

    users_data[user_id]["balance"] -= amount
    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ {amount:.2f} USDT. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_data[user_id]['balance']:.2f} USDT.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(Text(equals="back_to_main"))
async def back_to_main(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        "‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
