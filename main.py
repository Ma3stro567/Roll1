from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import random

API_TOKEN = '8152843550:AAH2ty2PVrJ3_gDllmE9sNn9r4XkveDTK_k'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé≤ –ò–≥—Ä–∞—Ç—å", callback_data="play_game"))
    keyboard.add(InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="set_bet"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"balance": 10.0, "bet": 0.05}  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                         f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} USDT\n"
                         f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 0.05 USDT", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == "play_game":
        await callback_query.message.answer("üé≤ –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å!")
    elif data == "set_bet":
        await callback_query.message.answer("üí∞ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 0.05, 1.0 –∏ —Ç.–¥.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ –∏ –∏–≥—Ä—ã
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_data:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
    if user_data[user_id].get("waiting_for_bet"):
        try:
            bet = float(message.text)
            if bet < 0.05:
                await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 0.05 USDT.")
                return
            if bet > user_data[user_id]["balance"]:
                await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
                return
            user_data[user_id]["bet"] = bet
            user_data[user_id]["waiting_for_bet"] = False
            await message.answer(f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {bet} USDT.", reply_markup=main_menu())
        except ValueError:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã
    try:
        guess = int(message.text)
        if guess < 1 or guess > 6:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")
            return

        if user_data[user_id]["bet"] > user_data[user_id]["balance"]:
            await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å—Ç–∞–≤–∫—É.")
            return

        # –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
        roll = random.randint(1, 6)
        if guess == roll:
            winnings = user_data[user_id]["bet"] * 2
            user_data[user_id]["balance"] += winnings
            await message.answer(f"üéâ –£—Ä–∞! –í—ã–ø–∞–ª–æ {roll}. –í—ã —É–≥–∞–¥–∞–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} USDT! "
                                 f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} USDT.")
        else:
            user_data[user_id]["balance"] -= user_data[user_id]["bet"]
            await message.answer(f"üò¢ –í—ã–ø–∞–ª–æ {roll}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[user_id]['balance']} USDT.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
@dp.callback_query_handler(lambda c: c.data == "set_bet")
async def set_bet_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_data[user_id]["waiting_for_bet"] = True
    await bot.send_message(user_id, "üí∞ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    
