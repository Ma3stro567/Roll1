        text = f"""
üëë **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨** üëë

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.bot_stats['total_users']}
üí∞ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {self.bot_stats['total_clicks']:,}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(self.banned_users)}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds//3600}—á

üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
"""

        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –∫–ª–∏–∫–∏", callback_data="admin_add_clicks")],
            [
                InlineKeyboardButton("üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_create_promo"),
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ", callback_data="admin_list_promos")
            ],
            [
                InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_ban_user"),
                InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_unban_user")
            ],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤", callback_data="admin_ban_list")]
        ]import asyncio
import json
import random
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_PASSWORD = "14885252"
MAX_CLICK_POWER = 25
MAX_AUTOCLICKER_SPEED = 60  # –∫–ª–∏–∫–æ–≤ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
CLICK_COOLDOWN = 15  # –∫–ª–∏–∫–æ–≤ –¥–æ –∫—É–ª–¥–∞—É–Ω–∞
COOLDOWN_TIME = 5  # —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω–∞
MYSTERY_BOX_PRICE = 300
REFERRAL_BONUS = 500

class UserData:
    def __init__(self):
        self.clicks = 0
        self.click_power = 1
        self.autoclicker_speed = 0
        self.click_count = 0  # —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–æ –∫—É–ª–¥–∞—É–Ω–∞
        self.cooldown_until = 0
        self.referrals = []
        self.referred_by = None
        self.last_autoclicker = time.time()

class PromoCode:
    def __init__(self, code: str, clicks: int, max_uses: int):
        self.code = code
        self.clicks = clicks
        self.max_uses = max_uses
        self.used_by = []

class TelegramClickerBot:
    def __init__(self, token: str):
        self.token = token
        self.users: Dict[int, UserData] = {}
        self.admins = set()
        self.banned_users = set()
        self.promo_codes: Dict[str, PromoCode] = {}
        self.bot_stats = {
            'total_users': 0,
            'total_clicks': 0,
            'start_time': datetime.now()
        }
        
    def get_user(self, user_id: int) -> UserData:
        if user_id in self.banned_users:
            return None
        if user_id not in self.users:
            self.users[user_id] = UserData()
            self.bot_stats['total_users'] += 1
        return self.users[user_id]

    def process_autoclicker(self, user: UserData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞"""
        if user.autoclicker_speed > 0:
            current_time = time.time()
            time_diff = current_time - user.last_autoclicker
            
            if time_diff >= 30:  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                clicks_to_add = user.autoclicker_speed
                user.clicks += clicks_to_add
                user.last_autoclicker = current_time
                self.bot_stats['total_clicks'] += clicks_to_add

    def is_in_cooldown(self, user: UserData) -> bool:
        return time.time() < user.cooldown_until

    def add_click(self, user: UserData) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω"""
        if self.is_in_cooldown(user):
            return False
            
        user.clicks += user.click_power
        user.click_count += 1
        self.bot_stats['total_clicks'] += user.click_power
        
        if user.click_count >= CLICK_COOLDOWN:
            user.cooldown_until = time.time() + COOLDOWN_TIME
            user.click_count = 0
            
        return True

    def get_click_upgrade_price(self, current_power: int) -> int:
        return current_power * 100

    def get_autoclicker_upgrade_price(self, current_speed: int) -> int:
        return (current_speed + 1) * 200

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        if user_id in self.banned_users:
            await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ!")
            return
            
        user = self.get_user(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        if context.args and len(context.args) > 0:
            try:
                referrer_id = int(context.args[0])
                if referrer_id != user_id and referrer_id in self.users and not user.referred_by:
                    user.referred_by = referrer_id
                    self.users[referrer_id].referrals.append(user_id)
                    self.users[referrer_id].clicks += REFERRAL_BONUS
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    await context.bot.send_message(
                        referrer_id,
                        f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ü–æ–ª—É—á–µ–Ω–æ {REFERRAL_BONUS} –∫–ª–∏–∫–æ–≤!"
                    )
            except (ValueError, KeyError):
                pass

        await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        if user_id in self.banned_users:
            await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ!")
            return
            
        user = self.get_user(user_id)
        if not user:
            return
            
        self.process_autoclicker(user)

        cooldown_text = ""
        if self.is_in_cooldown(user):
            remaining = int(user.cooldown_until - time.time()) + 1
            cooldown_text = f"\n‚ùÑÔ∏è –ö—É–ª–¥–∞—É–Ω: {remaining}—Å"

        text = f"""
üéÆ **–ö–õ–ò–ö–ï–† –ë–û–¢** üéÆ

üë§ –ò–≥—Ä–æ–∫: {update.effective_user.first_name}
üí∞ –ö–ª–∏–∫–∏: {user.clicks:,}
‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user.click_power}
ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: {user.autoclicker_speed}/30—Å
üìä –ö–ª–∏–∫–æ–≤ –¥–æ –∫—É–ª–¥–∞—É–Ω–∞: {CLICK_COOLDOWN - user.click_count}
{cooldown_text}

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

        keyboard = [
            [InlineKeyboardButton("üëÜ –ö–õ–ò–ö–ê–¢–¨", callback_data="click")],
            [
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
                InlineKeyboardButton("‚ö° –£–ª—É—á—à–µ–Ω–∏—è", callback_data="upgrades")
            ],
            [
                InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
                InlineKeyboardButton("üèÜ –¢–æ–ø—ã", callback_data="tops")
            ],
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)
        
        if self.add_click(user):
            await update.callback_query.answer(f"üí∞ +{user.click_power} –∫–ª–∏–∫–æ–≤!")
        else:
            remaining = int(user.cooldown_until - time.time()) + 1
            await update.callback_query.answer(f"‚ùÑÔ∏è –ö—É–ª–¥–∞—É–Ω! –û—Å—Ç–∞–ª–æ—Å—å: {remaining}—Å", show_alert=True)
        
        await self.show_main_menu(update, context)

    async def show_shop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)

        text = f"""
üõí **–ú–ê–ì–ê–ó–ò–ù** üõí

üí∞ –í–∞—à–∏ –∫–ª–∏–∫–∏: {user.clicks:,}

üéÅ –ú–∏—Å—Ç–µ—Ä–∏ –ë–æ–∫—Å - {MYSTERY_BOX_PRICE} –∫–ª–∏–∫–æ–≤
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: 1-1,000 –∫–ª–∏–∫–æ–≤!
"""

        keyboard = [
            [InlineKeyboardButton("üéÅ –ö—É–ø–∏—Ç—å –ú–∏—Å—Ç–µ—Ä–∏ –ë–æ–∫—Å", callback_data="buy_mystery_box")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def buy_mystery_box(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)

        if user.clicks >= MYSTERY_BOX_PRICE:
            user.clicks -= MYSTERY_BOX_PRICE
            reward = random.randint(1, 1000)
            user.clicks += reward
            
            await update.callback_query.answer(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∫–ª–∏–∫–æ–≤!", show_alert=True)
        else:
            await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤!", show_alert=True)
        
        await self.show_shop(update, context)

    async def show_upgrades(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)

        click_price = self.get_click_upgrade_price(user.click_power)
        auto_price = self.get_autoclicker_upgrade_price(user.autoclicker_speed)

        text = f"""
‚ö° **–£–õ–£–ß–®–ï–ù–ò–Ø** ‚ö°

üí∞ –í–∞—à–∏ –∫–ª–∏–∫–∏: {user.clicks:,}

üëÜ –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user.click_power}/{MAX_CLICK_POWER}
üíµ –¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è: {click_price:,} –∫–ª–∏–∫–æ–≤

ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: {user.autoclicker_speed}/{MAX_AUTOCLICKER_SPEED} –∑–∞ 30—Å
üíµ –¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è: {auto_price:,} –∫–ª–∏–∫–æ–≤
"""

        keyboard = []
        
        if user.click_power < MAX_CLICK_POWER:
            keyboard.append([InlineKeyboardButton(f"üëÜ –£–ª—É—á—à–∏—Ç—å –∫–ª–∏–∫ ({click_price:,})", callback_data="upgrade_click")])
        
        if user.autoclicker_speed < MAX_AUTOCLICKER_SPEED:
            keyboard.append([InlineKeyboardButton(f"ü§ñ –£–ª—É—á—à–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä ({auto_price:,})", callback_data="upgrade_auto")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def upgrade_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)
        price = self.get_click_upgrade_price(user.click_power)

        if user.clicks >= price and user.click_power < MAX_CLICK_POWER:
            user.clicks -= price
            user.click_power += 1
            await update.callback_query.answer(f"‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {user.click_power}!")
        else:
            await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤ –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!", show_alert=True)
        
        await self.show_upgrades(update, context)

    async def upgrade_autoclicker(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)
        price = self.get_autoclicker_upgrade_price(user.autoclicker_speed)

        if user.clicks >= price and user.autoclicker_speed < MAX_AUTOCLICKER_SPEED:
            user.clicks -= price
            user.autoclicker_speed += 1
            await update.callback_query.answer(f"ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä —É–ª—É—á—à–µ–Ω –¥–æ {user.autoclicker_speed}!")
        else:
            await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤ –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!", show_alert=True)
        
        await self.show_upgrades(update, context)

    async def show_referrals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)

        ref_link = f"https://t.me/your_bot_username?start={user_id}"
        
        text = f"""
üë• **–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê** üë•

üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: +{REFERRAL_BONUS} –∫–ª–∏–∫–æ–≤
üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {len(user.referrals)}

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
`{ref_link}`

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!
"""

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_tops(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –¢–æ–ø –ø–æ –∫–ª–∏–∫–∞–º
        users_by_clicks = sorted(self.users.items(), key=lambda x: x[1].clicks, reverse=True)[:10]
        clicks_top = ""
        for i, (uid, user_data) in enumerate(users_by_clicks, 1):
            try:
                user_info = await context.bot.get_chat(uid)
                name = user_info.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except:
                name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            clicks_top += f"{i}. {name}: {user_data.clicks:,} –∫–ª–∏–∫–æ–≤\n"

        # –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        users_by_refs = sorted(self.users.items(), key=lambda x: len(x[1].referrals), reverse=True)[:10]
        refs_top = ""
        for i, (uid, user_data) in enumerate(users_by_refs, 1):
            try:
                user_info = await context.bot.get_chat(uid)
                name = user_info.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except:
                name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            refs_top += f"{i}. {name}: {len(user_data.referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"

        text = f"""
üèÜ **–†–ï–ô–¢–ò–ù–ì–ò** üèÜ

üí∞ **–¢–û–ü –ü–û –ö–õ–ò–ö–ê–ú:**
{clicks_top or "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç"}

üë• **–¢–û–ü –ü–û –†–ï–§–ï–†–ê–õ–ê–ú:**
{refs_top or "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç"}
"""

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user = self.get_user(user_id)
        self.process_autoclicker(user)

        text = f"""
üìä **–í–ê–® –ü–†–û–§–ò–õ–¨** üìä

üë§ –ò–≥—Ä–æ–∫: {update.effective_user.first_name}
üí∞ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {user.clicks:,}
‚ö° –°–∏–ª–∞ –∫–ª–∏–∫–∞: {user.click_power}/{MAX_CLICK_POWER}
ü§ñ –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: {user.autoclicker_speed}/{MAX_AUTOCLICKER_SPEED} –∑–∞ 30—Å
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.referrals)}
üìä –ö–ª–∏–∫–æ–≤ –¥–æ –∫—É–ª–¥–∞—É–Ω–∞: {CLICK_COOLDOWN - user.click_count}
"""

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def admin_panel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args or context.args[0] != ADMIN_PASSWORD:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            return

        user_id = update.effective_user.id
        self.admins.add(user_id)
        await self.show_admin_panel(update, context)

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in self.admins:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
            return

        uptime = datetime.now() - self.bot_stats['start_time']
        
        text = f"""
üëë **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨** üëë

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.bot_stats['total_users']}
üí∞ –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {self.bot_stats['total_clicks']:,}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days}–¥ {uptime.seconds//3600}—á

üõ†Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
"""

        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –∫–ª–∏–∫–∏", callback_data="admin_add_clicks")],
            [
                InlineKeyboardButton("üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ", callback_data="admin_create_promo"),
                InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ", callback_data="admin_list_promos")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def promo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo –í–ê–®_–ü–†–û–ú–û–ö–û–î")
            return

        user_id = update.effective_user.id
        user = self.get_user(user_id)
        promo_code = context.args[0].upper()

        if promo_code not in self.promo_codes:
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        promo = self.promo_codes[promo_code]
        
        if user_id in promo.used_by:
            await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
            return

        if len(promo.used_by) >= promo.max_uses:
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω!")
            return

        promo.used_by.append(user_id)
        user.clicks += promo.clicks
        
        await update.message.reply_text(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promo.clicks:,} –∫–ª–∏–∫–æ–≤!")

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "main_menu":
            await self.show_main_menu(update, context)
        elif query.data == "click":
            await self.handle_click(update, context)
        elif query.data == "shop":
            await self.show_shop(update, context)
        elif query.data == "buy_mystery_box":
            await self.buy_mystery_box(update, context)
        elif query.data == "upgrades":
            await self.show_upgrades(update, context)
        elif query.data == "upgrade_click":
            await self.upgrade_click(update, context)
        elif query.data == "upgrade_auto":
            await self.upgrade_autoclicker(update, context)
        elif query.data == "referrals":
            await self.show_referrals(update, context)
        elif query.data == "tops":
            await self.show_tops(update, context)
        elif query.data == "profile":
            await self.show_profile(update, context)
        # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        elif query.data.startswith("admin_"):
            user_id = update.effective_user.id
            if user_id not in self.admins:
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
                return
            
            if query.data == "admin_broadcast":
                await query.edit_message_text("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
                context.user_data['waiting_for'] = 'broadcast'
            elif query.data == "admin_add_clicks":
                await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 123456789 1000")
                context.user_data['waiting_for'] = 'add_clicks'
            elif query.data == "admin_create_promo":
                await query.edit_message_text("üé´ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–§–æ—Ä–º–∞—Ç: –ö–û–î –ö–õ–ò–ö–ò –ö–û–õ–ò–ß–ï–°–¢–í–û_–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ô\n–ü—Ä–∏–º–µ—Ä: BONUS500 500 10")
                context.user_data['waiting_for'] = 'create_promo'
            elif query.data == "admin_list_promos":
                await self.show_promo_list(update, context)

    async def show_promo_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.promo_codes:
            text = "üìã –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text = "üìã **–°–ü–ò–°–û–ö –ü–†–û–ú–û–ö–û–î–û–í:**\n\n"
            for code, promo in self.promo_codes.items():
                text += f"üé´ `{code}`\nüí∞ –ö–ª–∏–∫–æ–≤: {promo.clicks:,}\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(promo.used_by)}/{promo.max_uses}\n\n"

        keyboard = [
            [InlineKeyboardButton("üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id not in self.admins:
            return

        waiting_for = context.user_data.get('waiting_for')
        
        if waiting_for == 'broadcast':
            message = update.message.text
            sent_count = 0
            
            for uid in self.users.keys():
                try:
                    await context.bot.send_message(uid, message)
                    sent_count += 1
                except:
                    pass
            
            await update.message.reply_text(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
            context.user_data['waiting_for'] = None
            
        elif waiting_for == 'add_clicks':
            try:
                parts = update.message.text.split()
                target_id = int(parts[0])
                clicks = int(parts[1])
                
                if target_id in self.users:
                    self.users[target_id].clicks += clicks
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {clicks:,} –∫–ª–∏–∫–æ–≤!")
                else:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            except:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID –ö–õ–ò–ö–ò")
            
            context.user_data['waiting_for'] = None
            
        elif waiting_for == 'create_promo':
            try:
                parts = update.message.text.split()
                code = parts[0].upper()
                clicks = int(parts[1])
                max_uses = int(parts[2])
                
                self.promo_codes[code] = PromoCode(code, clicks, max_uses)
                await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω!\nüí∞ –ö–ª–∏–∫–æ–≤: {clicks:,}\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}")
            except:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–û–î –ö–õ–ò–ö–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
            
            context.user_data['waiting_for'] = None

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    TOKEN = "YOUR_BOT_TOKEN"
    
    bot = TelegramClickerBot(TOKEN)
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("adminpanel", bot.admin_panel_command))
    application.add_handler(CommandHandler("promo", bot.promo_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(bot.callback_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.message_handler))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()